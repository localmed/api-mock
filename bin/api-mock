#!/usr/bin/env node
var optimist = require('optimist');
var winston = require('winston');
var defaultLogger = winston.defaultLogger;
var parsePackageJson = require('../lib/parse-package-json');
var path = require('path');
var ApiMock = require('../lib/api-mock');
var CorsSupport = require('../lib/cors-support');

var version = parsePackageJson(path.join(__dirname, '../package.json'));

winston.cli();

options = {
  port: {
    alias: "p",
    description: "Set which port api-mock should listen on.\n",
    'default': 3000
  },
  'ssl-enable': {
    alias: "s",
    description: "Enable SSL support.\n",
    'default': false,
    'boolean': true
  },
  'ssl-port': {
    description: "Set which port api-mock should listen on for SSL traffic.\n",
    'default': 3080
  },
  'ssl-host': {
    description: "Set hostname for SSL server.\n",
  },
  'ssl-cert': {
    description: "Set path for SSL certificate file.\n",
    'default': './server.crt'
  },
  'ssl-key': {
    description: "Set path for SSL key file.\n",
    'default': './server.key'
  },
  'cors-disable': {
    alias: "c",
    description: "Disable CORS headers.\n",
    'default': false,
    'boolean': true
  },
  color: {
    alias: "k",
    description: "Colorize cli output.\n",
    'default': true,
    'boolean': true
  },
  'delay': {
    alias: "d",
    description: "Add a delay (in ms) to your response times to mimic interacting with external APIs.\n",
    'default': 0
  },
  help: {
    description: "Show usage information.\n"
  },
  version: {
    description: "Show version number.\n"
  }
}

var argv = optimist
    .usage("Usage: \n  " + "api-mock <path to blueprint>  [OPTIONS]"
     + "\n\nExample: \n  " + "api-mock ./apiary.md --port 3000")
    .options(options)
    .wrap(80)
    .argv;


winston.default.transports.console.colorize = argv.color;

if (argv.help == true) {
  optimist.showHelp(fn=console.log);
  process.exit(0);
}

if (argv.version == true) {
  console.log(version);
  process.exit(0);
}

if (argv._[0] == undefined) {
  winston.error("Must specify path to blueprint file.\n");
  optimist.showHelp(fn=console.log);
  process.exit(1);
}

configuration = {
  'blueprintPath': argv._[0],
  'options': argv
}

process.on( 'SIGINT', function() {
  process.exit(0);
});

process.on('uncaughtException', function(err) {
    if(err.errno === 'EADDRINUSE') {
         winston.error('The specified port is being used by another process. Specify a different port with -p.');
    } else {
         winston.error(err + '\n' + err.stack);
    }
    process.exit(1);
});

try {
  apiMock = new ApiMock(configuration);
  apiMock.run();
  winston.info('Listening on port ' + configuration.options.port)
} catch(e) {
  winston.error(e + '\n' + e.stack);
  process.exit(1);
}
