// Generated by CoffeeScript 1.6.3
var exampleToHttpPayloadPair, expandUriTemplateWithParameters, inheritHeaders, inheritParameters, ut, walker, winston;

inheritHeaders = require('./inherit-headers');

inheritParameters = require('./inherit-parameters');

expandUriTemplateWithParameters = require('./expand-uri-template-with-parameters');

exampleToHttpPayloadPair = require('./example-to-http-payload-pair');

ut = require('uri-template');

winston = require('winston');

walker = function(app, resourceGroups) {
  var action, error, example, group, path, payload, resource, response, responses, sendResponse, warning, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _results;
  sendResponse = function(responses) {
    return function(req, res) {
      var header, headerName, headerValue, response, value, _ref;
      response = responses[Object.keys(responses)[0]];
      if ('prefer' in req.headers) {
        if (req.headers['prefer'] in responses) {
          response = responses[req.headers['prefer']];
        } else {
          winston.warn("[" + req.url + "] Preferrered response " + req.headers['prefer'] + " not found. Falling back to " + response.status);
        }
      }
      _ref = response.headers;
      for (header in _ref) {
        value = _ref[header];
        headerName = value['name'];
        headerValue = value['value'];
        res.setHeader(headerName, headerValue);
      }
      res.setHeader('Content-Length', Buffer.byteLength(response.body));
      return res.send(response.status, response.body);
    };
  };
  responses = [];
  for (_i = 0, _len = resourceGroups.length; _i < _len; _i++) {
    group = resourceGroups[_i];
    _ref = group['resources'];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      resource = _ref[_j];
      _ref1 = resource['actions'];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        action = _ref1[_k];
        action['headers'] = inheritHeaders(action['headers'], resource['headers']);
        action['parameters'] = inheritParameters(action['parameters'], resource['parameters']);
        if (resource['uriTemplate'] != null) {
          path = resource['uriTemplate'].split('{?')[0].replace(new RegExp("}", "g"), "").replace(new RegExp("{", "g"), ":");
          _ref2 = action['examples'];
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            example = _ref2[_l];
            payload = exampleToHttpPayloadPair(example, action['headers']);
            _ref3 = payload['warnings'];
            for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
              warning = _ref3[_m];
              winston.warn("[" + path + "] " + warning);
            }
            _ref4 = payload['errors'];
            for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
              error = _ref4[_n];
              winston.error("[" + path + "] " + error);
            }
            responses.push({
              method: action.method,
              path: path,
              responses: payload['pair']['responses']
            });
          }
        }
      }
    }
  }
  responses.sort(function(a, b) {
    if (a.path > b.path) {
      return -1;
    }
    if (a.path < b.path) {
      return 1;
    }
    return 0;
  });
  _results = [];
  for (_o = 0, _len6 = responses.length; _o < _len6; _o++) {
    response = responses[_o];
    switch (response.method) {
      case 'GET':
        _results.push(app.get(response.path, sendResponse(response.responses)));
        break;
      case 'POST':
        _results.push(app.post(response.path, sendResponse(response.responses)));
        break;
      case 'PUT':
        _results.push(app.put(response.path, sendResponse(response.responses)));
        break;
      case 'DELETE':
        _results.push(app["delete"](response.path, sendResponse(response.responses)));
        break;
      case 'PATCH':
        _results.push(app.patch(response.path, sendResponse(response.responses)));
        break;
      default:
        _results.push(void 0);
    }
  }
  return _results;
};

module.exports = walker;
